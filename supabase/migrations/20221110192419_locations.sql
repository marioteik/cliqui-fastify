-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.

CREATE TABLE IF NOT EXISTS public.locations
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid NOT NULL,
    country text COLLATE pg_catalog."default" NOT NULL,
    locality text COLLATE pg_catalog."default" NOT NULL,
    region text COLLATE pg_catalog."default" NOT NULL,
    postal_code text COLLATE pg_catalog."default" NOT NULL,
    address_1 text COLLATE pg_catalog."default" NOT NULL,
    address_2 text COLLATE pg_catalog."default" NOT NULL,
    "number" bigint NOT NULL,
    latitude double precision NOT NULL,
    longitude double precision NOT NULL,
    elevation real NOT NULL,
    google_id text COLLATE pg_catalog."default",
    CONSTRAINT locations_pkey PRIMARY KEY (id),
    CONSTRAINT locations_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.locations
    OWNER to postgres;

ALTER TABLE IF EXISTS public.locations
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.locations TO anon;

GRANT ALL ON TABLE public.locations TO authenticated;

GRANT ALL ON TABLE public.locations TO postgres;

GRANT ALL ON TABLE public.locations TO service_role;

COMMENT ON TABLE public.locations
    IS 'users and establishments locations';

COMMENT ON COLUMN public.locations.user_id
    IS 'UserId';

COMMENT ON COLUMN public.locations.country
    IS 'Country location';

COMMENT ON COLUMN public.locations.locality
    IS 'Locality (bairro) of the location';

COMMENT ON COLUMN public.locations.region
    IS 'Region (cidade) of the location';

COMMENT ON COLUMN public.locations.postal_code
    IS 'Postal Code of the location';

COMMENT ON COLUMN public.locations.address_1
    IS 'Street address from the location';

COMMENT ON COLUMN public.locations.address_2
    IS 'Complementary street address information';

COMMENT ON COLUMN public.locations."number"
    IS 'Location number';

COMMENT ON COLUMN public.locations.latitude
    IS 'Geolocation latitude';

COMMENT ON COLUMN public.locations.longitude
    IS 'Longitude location';

COMMENT ON COLUMN public.locations.elevation
    IS 'Location elevation';

COMMENT ON COLUMN public.locations.google_id
    IS 'Google geolocation Id';
CREATE POLICY "Enable all actions for users based on user_id"
    ON public.locations
    AS PERMISSIVE
    FOR ALL
    TO authenticated
    USING ((auth.uid() = user_id))
    WITH CHECK ((auth.uid() = user_id));

REVOKE ALL ON TABLE public.categories FROM anon;
REVOKE ALL ON TABLE public.categories FROM authenticated;
REVOKE ALL ON TABLE public.categories FROM postgres;
REVOKE ALL ON TABLE public.categories FROM service_role;
REVOKE ALL ON TABLE public.categories FROM supabase_admin;
GRANT ALL ON TABLE public.categories TO supabase_admin;

GRANT ALL ON TABLE public.categories TO authenticated;

GRANT ALL ON TABLE public.categories TO anon;

GRANT ALL ON TABLE public.categories TO postgres;

GRANT ALL ON TABLE public.categories TO service_role;
